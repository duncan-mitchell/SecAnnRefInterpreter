let [%error] = func(err, lbl) {
  prim("print", "Ended in error");
  err
}

let [%answer] = func(answer) {
  prim("print", "Ended in answer");
  answer
}

/*
rec [%getField] = func (ret, exn, obj, field, args) {
    if (prim("stx=", obj, null)) {
        ret (undefined)
    } else {
        if (prim("hasOwnProperty", obj, field)) {
            if (prim("isAccessor", obj, field)) {
                ret(obj[field<#getter>](ret, exn, args))
            } else {
                ret(obj[field<#value>])
            }
        } else {
            %getField(ret, exn, prim("get-proto", obj), field, args)
        }
    }
}

rec [%updateField] = func (ret, exn, obj1, obj2, field, value, args) {
    if (prim("stx=", obj1, null)) {
        obj2[field<#writable> = true];
        obj2[field<#value> = value];
        ret(value)
    } else {
        if (prim("hasOwnProperty", obj1, field)) {
            if (prim("isAccessor", obj1, field)) {
                ret(obj1[field<#setter>](ret, exn, args))
            } else {
                if (obj1[field<#writable>]) {
                    if (prim("stx=", obj1, obj2)) {
                        obj2[field<#writable> = true];
                        obj2[field<#value> = value];
                        ret(value)
                    } else {
                        obj1[field<#value> = value];
                        obj1[field<#writable> = true];
                        ret(value)
                    }
                } else {
                    exn(prim("string+", "Field not writable: ", field), "##catchMe##")
                }
            }
        } else {
            %updateField(ret, exn, prim("get-proto", obj1), obj2, field, value, args)
        }
    }
}
*/
